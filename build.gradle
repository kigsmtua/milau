apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'application'

group = 'io.github.kigsmtua'
version = '0.1.0'
archivesBaseName = "milau"
description = """Distributed time based queue based on redis"""
sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = 'com.milau.cli.App'


repositories {
    mavenCentral()
}

dependencies {
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.6'
    compile group: 'co.paralleluniverse', name: 'quasar-core', version: '0.7.5'
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile 'com.google.guava:guava:23.0'
    testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                   'Main-Class': 'com.milau.cli.App',
                   'Implementation-Version': project.version)
    }
}

test {
    testLogging.showStandardStreams = true
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.github.kigsmtua'
            artifactId 'milau'
            version '0.1.0'

            from components.java

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST
            description 'A distributed task queue supporting priorities and time based exection based on redis. '
            name 'Milau'
            url 'https://github.com/kigsmtua/milau'
            organization {
                name 'io.github.kigsmtua'
                url 'https://github.com/kigsmtua'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/kigsmtua/milau/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/kigsmtua/milau/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/kigsmtua/milau'
                connection 'scm:git:git://github.com/kigsmtua/milau.git'
                developerConnection 'scm:git:ssh://git@github.com:kigsmtua/milau.git'
            }
            developers {
                developer {
                    name 'John Kiragu'
                    email 'mutuakiragu@gmail.com'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}